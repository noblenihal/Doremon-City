// Globals
var grid = new Array(cols);
var start=undefined; 
var end = undefined;
started = false;



function removeFromArray(arr, elt) {
  
  for (var i = arr.length - 1; i >= 0; i--) {
    if (arr[i] == elt) {
      arr.splice(i, 1);
    }
  }
}


function heuristic(a, b) {
  var d = dist(a.i, a.j, b.i, b.j);
  
  return d;
}

var cols = 50;
var rows = 50 ;


// I ploted these plots with a different  but similiar script using p5.js 

var plot = [2478, 2429, 2379, 2329, 2280, 2230, 2181, 2131, 2132, 2082, 2032, 2033, 1983, 1933, 1934, 1884, 1834, 1835, 1785, 
  1735, 1736, 1686, 1636, 1586, 1537, 1487, 1437, 1387, 1337, 1287, 1237, 1187, 1138, 1087, 1136, 1137, 1085, 1084, 1083, 1032, 1031, 980, 929, 878, 827, 776, 726, 675, 727, 677, 627, 678, 728, 778, 777, 828, 829, 779, 729, 679, 628, 624, 573, 523, 472, 
  422, 371, 421, 420, 470, 519, 568, 618, 667, 666, 716, 715, 765, 764, 814, 813, 863, 862, 861, 911, 812, 910, 909, 959, 958, 
  957, 1007, 1006, 1056, 1055, 1054, 1103, 1053, 1152, 1102, 1151, 1101, 1104, 1005, 1709, 1659, 1608, 1558, 1508, 1458, 1106,
   1156, 1257, 1207, 1307, 1357, 1407, 1306, 1356, 1456, 1406, 1457, 1506, 1507, 1557, 1556, 1607, 1657, 1658, 1708, 1759, 
   1758, 1206, 1256, 1707, 1606, 1808, 1809, 877, 927, 977, 1026, 1076, 1027, 1126, 1176, 1226, 1275, 1325, 1425, 1375, 1474, 
   1524, 1574, 1624, 1673, 1723, 1773, 1822, 1872, 1971, 2021, 2070, 2069, 2118, 2167, 2166, 2115, 2064, 2013, 1962, 1911, 
   1860, 1810, 2071, 2122, 2223, 2172, 2274, 2324, 2325, 2376, 2427, 2081, 2031, 2030, 2029, 1979, 1980, 1981, 2180, 2129, 
   2128, 2077, 2027, 1977, 1926, 1975, 2025, 2074, 2124, 2174, 2224, 2273, 2323, 2372, 2421, 2420, 2369, 2318, 2267, 2217, 
   1876, 1826, 1776, 1726, 1677, 1627, 1527, 1577, 1526, 1475, 1478, 1479, 1430, 1381, 1332, 1283, 1333, 1384, 1436, 1385, 
   1281, 1230, 1179, 1178, 1127, 1025, 974, 923, 872, 1931, 1881, 1781, 1680, 1629, 1578, 1681, 1731, 1831, 1732, 1733, 1784, 
   1631, 1581, 1531, 1431, 1481, 2436, 2485, 2386, 2335, 2284, 2233, 2182, 2337, 2288, 2238, 2189, 2139, 2090, 2040, 1990, 
   1941, 1891, 1890, 1889, 1838, 1837, 1786, 1841, 1792, 1742, 1693, 1643, 1593, 1543, 1542, 1491, 1490, 1489, 1488, 1493, 
   1494, 1394, 1444, 1344, 1294, 1194, 1244, 1144, 1094, 1045, 1046, 996, 946, 896, 997, 998, 1093, 1142, 1140, 1141, 1139, 
   1091, 1041, 941, 991, 1092, 1772, 1721, 1720, 1619, 1568, 1517, 1670, 1621, 1671, 1571, 1520, 1420, 1470, 1369, 1368, 1417, 
   1416, 1467, 1365, 1315, 1265, 1214, 1164, 1113, 1162, 1261, 1310, 1409, 1511, 1460, 1360, 1410, 1512, 1513, 1464, 1415, 1319, 1269, 1169, 1120, 1020, 1070, 971, 1219, 921, 871, 822, 821, 772, 722, 623, 672, 890, 888, 889, 887, 885, 886, 884, 883, 833, 783, 733, 683, 633, 583, 533, 483, 433, 383, 333, 334, 335, 336, 337, 338, 389, 439, 489, 539, 589, 639, 689, 739, 789, 839, 838, 837, 836, 835, 834, 784, 785, 734, 735, 736, 786, 686, 685, 684, 634, 635, 636, 586, 585, 584, 534, 484, 434, 384, 385, 435, 485, 535, 536, 486, 436, 386, 387, 437, 487, 537, 587, 637, 687, 737, 787, 788, 738, 638, 688, 588, 538, 488, 438, 388, 840, 891, 882, 832, 782, 732, 682, 632, 582, 532, 432, 482, 382, 284, 285, 286, 287, 1842, 1892, 1943, 1993, 2043, 2094, 2144, 2195, 2295, 2245, 2296, 2346, 2395, 2445, 2495, 2397, 2448, 2499, 321, 271, 170, 221, 120, 69, 19, 25, 74, 75, 124, 173, 174, 273, 223, 272, 322, 617, 1587, 1536, 1212];

var grid = new Array(cols);

var openSet = [];
var closedSet = []; 
var x,y, k;
var w, h;

function Spot(i,j){
  this.cell = i + j*cols + 1;
  this.i = i;
  this.j = j;

  this.g = 0;
  this.h = 0;
  this.f = 0;
  this.wall = false;
  this.neighbors = [];
  this.previous = undefined;



  this.addNeighbors = function(grid) {
    var i = this.i;
    var j = this.j;
    if (i < cols - 1) {
      this.neighbors.push(grid[i + 1][j]);
    }
    if (i > 0) {
      this.neighbors.push(grid[i - 1][j]);
    }
    if (j < rows - 1) {
      this.neighbors.push(grid[i][j + 1]);
    }
    if (j > 0) {
      this.neighbors.push(grid[i][j - 1]);
    }
    if (i > 0 && j > 0) {
      this.neighbors.push(grid[i - 1][j - 1]);
    }
    if (i < cols - 1 && j > 0) {
      this.neighbors.push(grid[i + 1][j - 1]);
    }
    if (i > 0 && j < rows - 1) {
      this.neighbors.push(grid[i - 1][j + 1]);
    }
    if (i < cols - 1 && j < rows - 1) {
      this.neighbors.push(grid[i + 1][j + 1]);
    }
  };
}

